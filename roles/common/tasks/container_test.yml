---
- name: Set container name to a variable
  ansible.builtin.set_fact:
    container_name: "{{ item }}"

- name: debug - print groups[computes]
  ansible.builtin.debug:
    var: groups['computes']

- name: debug - try whoami with delegate_to
  ansible.builtin.shell:
    cmd: |
      whoami
  changed_when: false
  register: results
  delegate_to: "{{ compute_node }}"
  become: true
  loop: "{{ groups['computes'] }}"
  loop_control:
    loop_var: compute_node

- name: debug - print output of whoami commands
  ansible.builtin.debug:
    var: results

- name: debug - try podman cmd without grep
  ansible.builtin.shell:
    cmd: |
      podman ps -a --format "{{ '{{.Names}} {{.Status}}' }}"
  changed_when: false
  register: results
  delegate_to: "{{ compute_node }}"
  become: true
  loop: "{{ groups['computes'] }}"
  loop_control:
    loop_var: compute_node

- name: debug - print output of podman commands
  ansible.builtin.debug:
    var: results

- name: Get container status
  ansible.builtin.shell:
    cmd: |
      podman ps -a --format "{{ '{{.Names}} {{.Status}}' }}" | grep {{ container_name }}
  changed_when: false
  register: container_status
  delegate_to: "{{ compute_node }}"
  become: true
  loop: "{{ groups['computes'] }}"
  loop_control:
    loop_var: compute_node

- name: Verify container status {{ common_container_test_id }}
  ansible.builtin.assert:
    that:
      - "'unhealthy' not in status.stdout"
    success_msg: "Container '{{ container_name }}' is in 'healthy' status."
    fail_msg: "Container '{{ container_name }}' is not in 'healthy' status. Current status: {{ status.stdout }}"
  loop: "{{ container_status.results }}"
  loop_control:
    loop_var: status
